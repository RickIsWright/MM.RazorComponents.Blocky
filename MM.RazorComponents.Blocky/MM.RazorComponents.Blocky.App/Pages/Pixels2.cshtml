@page "/p2"
<div class="container-fluid mb-auto">
    <div class="row">
        <div class="col-12">
            <h3>Pixel Count @pixelCount</h3>
            <p>Hold ALT and move mouse to change position.</p>
        </div>
    </div>
    <div class="row">
        <div class="col-8" onmousemove=@MouseMove ref="@divRef">
            @if (pixels != null)
            {
                foreach (var pixel in pixels)
                {
                    <Pixel3 Color=pixel.Colors Position=pixel.Position Size=pixel.Size />
                }
            }
        </div>
        <div class="form-group col-2">
            <label>Refresh</label><input class="form-control" type="number" min="1" bind=@RefreshInterval autofocus="autofocus" title="Delay between refreshes (ms)" />
            <label>Pixel Interval</label><input class="form-control" type="number" min="1" bind=@PixelInterval title="Delay between position updates (ms)" />
            <label>Spawn Interval</label><input class="form-control" type="number" min="1" bind=@SpawnInterval title="Delay between spawning pixels" />
            <label>Spawn Per Interval</label><input class="form-control" type="number" min="1" max="100" bind=@SpawnPerInterval title="How many pixels spawn each interval" />
            <label>Max Pixels</label><input class="form-control" type="number" min="0" max="2000" step="50" bind=@MaxPixelCount title="Number of pixels to spawn" />
        </div>
        <div class="form-group col-2">
            <label>Initial Pixel Size</label><input class="form-control" type="number" min="1" max="100" bind=@InitialPixelSize title="Pixel Start Size (px)" />
            <label>Pixel Scale Factor</label><input class="form-control" type="number" min="1.00" max="1.03" step="0.01" bind=@PixelScaleFactor title="Growth factor for pixels" />
            <label>Pixel Alpha Factor</label><input class="form-control" type="number" min="0.01" max="1.00" step="0.01" bind=@PixelAlphaFactor title="Alpha factor for pixels" />
            <label>Delta X Factor</label><input class="form-control" type="number" min="0" max="2.00" step="0.01" bind=@DeltaXFactor title="Delta X factor for pixels" />
            <label>Delta X Factor</label><input class="form-control" type="number" min="0" max="2.00" step="0.01" bind=@DeltaYFactor title="Delta Y factor for pixels" />
        </div>
    </div>
</div>
@functions
{
    [Inject] IJSRuntime jSRuntime { get; set; }
    ElementRef divRef;

    // The list of active pixels
    List<PixelDTO> pixels;
    // Task that controls refreshing the page
    Task draw;
    // Task that controls spawning new pixels
    Task spawn;
    // Random number source for variations in initial velocity
    Random random;

    // Pixel spawn point
    double EX, EY;
    // Screen limits - should be read at runtime, but this is just a demo
    const int SCREEN_WIDTH = 1900;
    const int SCREEN_HEIGHT = 700;

    // Time (ms) between StateHasChanged : lower = more FPS, higher = fewer FPS
    int RefreshInterval = 5;
    // Time (ms) between new Pixel spawning : lower = more pixels, higher = fewer pixels
    int SpawnInterval = 5;
    // Time (ms) between Pixel movements : lower = faster pixels, higher = slower pixels
    int PixelInterval = 5;
    // Number of pixels spawned per interval : lower = fewer pixels, higher = more pixels
    int SpawnPerInterval = 2;
    // Maximum number of pixels allowed
    int MaxPixelCount = 500;
    // Initial pixel size
    double InitialPixelSize = 5.0;
    // Alter pixel size per frame : lower than 1 = reduce in size, higher than 1 = increase in size
    double PixelScaleFactor = 1.005;
    // Alter pixel alpha per frame : lower than 1 = reduce alpha, higher than 1 = increase alpha
    double PixelAlphaFactor = 0.99;
    // Alter X-axis movement delta per frame : deltaX *= DeltaXFactor
    double DeltaXFactor = 1.00;
    // Alter Y-axis movement delta per frame : deltaY += DeltaYFactor
    double DeltaYFactor = 0.05;
    double Hue = 5.0;
    int pixelCount = 0;

    protected override void OnInit()
    {
        base.OnInit();
        EX = 500;
        EY = 200;
        pixels = new List<PixelDTO>();
        random = new Random();
        draw = Draw();
        spawn = Spawn();
    }

    async Task MouseMove(UIMouseEventArgs args)
    {
        if (args.AltKey)
        {
            var offset = await jSRuntime.InvokeAsync<int[]>("pixel.getOffset", divRef);
            int x = offset[0];
            int y = offset[1];
            EX = args.ClientX - x;
            EY = args.ClientY - y;
        }
    }

    async Task Draw()
    {
        while (true) // Only because this is a demo!
        {
            await Task.Delay(RefreshInterval);
            await Invoke(StateHasChanged);
        }
    }

    async Task Spawn()
    {
        while (true) // Only because this is a demo!
        {
            await Task.Delay(SpawnInterval);
            {
                // Cycle the colours
                if (pixelCount < MaxPixelCount)
                {
                    Hue += SpawnPerInterval;
                    Hue = Hue > 250 ? 5 : Hue;
                    for (int i = 0; i < SpawnPerInterval; i++)
                    {
                        SpawnPixel(Hue);
                        pixelCount++;
                    }
                }
                else if (pixelCount > MaxPixelCount)
                {
                    pixelCount = MaxPixelCount;
                    TrimPixels();
                }
            }
        }
    }

    Task TrimPixels()
    {
        pixels.Skip(MaxPixelCount).ToList().ForEach(p => p.Die());
        return Task.CompletedTask;
    }

    async Task SpawnPixel(double Hue)
    {
        // Pixel Color/Position/Scale
        PixelDTO pixel = new PixelDTO()
        {
            Colors = new Colors(Hue, 90, 70, 1),
            Position = new Position(EX, EY),
            Scale = InitialPixelSize
        };

        // Add the new pixel to the list, so it gets drawn
        pixels.Add(pixel);

        // Pixel handles it's own motion
        while (!pixel.ShouldDie) // again - only because it's a demo
        {
            // Initial velocity deltas for the pixel
            double deltaX = random.NextDouble() * 2 - 1.2;
            double deltaY = 0 - random.NextDouble() * 1;
            pixel.Position = new Position(EX + deltaX, EY + deltaY);
            pixel.Scale = InitialPixelSize;
            pixel.Colors.A = 1;
            pixel.Colors.C1 = Hue;
            while (pixel.Position.X > 0 && pixel.Position.X < SCREEN_WIDTH && pixel.Position.Y < SCREEN_HEIGHT)
            {
                // Very crude timing - if this was to be accurate we would need a frame time delta to scale movements
                await Task.Delay(PixelInterval);
                pixel.Position.X += deltaX;
                pixel.Position.Y += deltaY;
                pixel.Scale *= PixelScaleFactor;
                deltaX *= DeltaXFactor;
                deltaY += DeltaYFactor;
                pixel.Colors.A *= PixelAlphaFactor;
            }
        };
        pixels.Remove(pixel);

    }
    //
}