@page "/pixels2"
@using SkiaSharp

<div class="container-fluid mb-auto">
    <div class="row">
        <div class="col-12">
            <h3>Pixel image</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            @if (Pixels is null)
            {
                <h4>Loading image...</h4>
            }
            else
            {
                foreach (var pixel in Pixels)
                {
                    <Pixel Color=pixel.Colors Position=pixel.Position Size=pixel.Size PositionVars="true" />
                }
            }
        </div>
    </div>
</div>
@functions {
  // The list of active pixels
  System.Collections.Concurrent.ConcurrentBag<PixelDTO> Pixels;

  private const double MAXDIM = 80;
  public int PixelSize = 5;
  public int PictureWidth = 0;
  public int PictureHeight = 0;
  Task Loader;

  protected override async Task OnInitAsync()
  {
      Loader = LoadImage();
      await Invoke(StateHasChanged);
  }

  async Task LoadImage()
  {
      await Task.Delay(1);
      var filepath = @"C:\Users\miste\source\repos\MM.RazorComponents.Blocky\MM.RazorComponents.Blocky\MM.RazorComponents.Blocky.Server\wwwroot\images\dotnetbot.jpg";
      var bytes = await Task.FromResult(System.IO.File.ReadAllBytes(filepath));
      using (var stream = new SKMemoryStream(bytes))
      {
          using (SKBitmap imageInitial = SKBitmap.Decode(stream))
          {
              Pixels = new System.Collections.Concurrent.ConcurrentBag<PixelDTO>();
              int newSize = (int)MAXDIM;
              SKBitmap image;
              if (imageInitial.Width > newSize || imageInitial.Height > newSize)
              {
                  var newWidth = imageInitial.Width;
                  var newHeight = imageInitial.Height;
                  double scale = 1;
                  if (newWidth > newHeight)
                  {
                      scale = (newSize / (double)newWidth);
                  }
                  else
                  {
                      scale = (newSize / (double)newHeight);
                  }
                  var newInfo = imageInitial.Info.WithSize((int)(newWidth * scale), (int)(newHeight * scale));
                  image = imageInitial.Resize(newInfo, SKFilterQuality.High);
              }
              else
              {
                  image = imageInitial;
              }

              Parallel.For(0, image.Height - 1, y =>
              {
                  Parallel.For(0, image.Width - 1, x =>
                  {
                      SKColor sKColor = image.GetPixel(x, y);
                      sKColor.ToHsl(out float h, out float s, out float l);
                      if (l < 100)
                      {
                          var pixel = new PixelDTO()
                          {
                              Colors = new Colors(h, s, l, sKColor.Alpha),
                              Position = new Position(x * PixelSize, y * PixelSize),
                              Scale = PixelSize
                          };
                          Pixels.Add(pixel);
                      }
                  });
              });
          }
      }
      await Invoke(StateHasChanged);
  }

}
