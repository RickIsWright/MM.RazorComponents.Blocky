<div class="container-fluid mb-auto">
    <div class="row">
        <div class="col-12">
            <h3>Pixel™ Count @pixelCount</h3>
        </div>
    </div>
    <div class="row">
        <div class="col-8" >
            @if (pixels != null)
            {
                foreach (var pixel in pixels)
                {
                    <KeyframePixel Color=pixel.Colors Position=pixel.Position Size=pixel.Size SubClassName="px-fall"
                                   ArcPosition=pixel.ArcPosition StartPosition=pixel.StartPosition ScaleRange=pixel.ScaleRange
                                   OpacityRange=pixel.OpacityRange SpeedRange=@SpeedRange/>
                }
            }
        </div>
        <div class="form-group col-2">
            <label>Refresh</label><input class="form-control" type="number" min="1" bind=@RefreshInterval autofocus="autofocus" title="Delay between refreshes (ms)" />
            <label>Spawn Per Interval</label><input class="form-control" type="number" min="1" max="100" bind=@SpawnPerInterval title="How many Pixels™ spawn each interval" />
            <label>Max Pixel™s</label><input class="form-control" type="number" min="0" max="1000" step="50" bind=@MaxPixelCount title="Number of Pixel™s to spawn" />
            <label>Initial Pixel™ Size</label><input class="form-control" type="number" min="1" max="100" bind=@InitialPixelSize title="Pixel™ Start Size (px)" />
        </div>
        <div class="form-group col-2">
            <label>Pixel™ Scale Factor</label><input class="form-control" type="number" min="0.01" step="0.01" bind=@PixelScaleFactor title="Growth factor for Pixel™s" />
            <label>Pixel™ Alpha Factor</label><input class="form-control" type="number" min="0.01" max="1.00" step="0.01" bind=@PixelAlphaFactor title="Alpha factor for Pixel™s" />
            <label>Delta X Factor</label><input class="form-control" type="number" min="0" step="0.01" bind=@DeltaXFactor title="Delta X factor for Pixel™s" />
            <label>Delta Y Factor</label><input class="form-control" type="number" min="0" step="0.01" bind=@DeltaYFactor title="Delta Y factor for Pixel™s" />
        </div>
    </div>
</div>
@functions
{
        bool Redraw = true;

        // The list of active pixels
        List<PixelDTO> pixels;
        // Task that controls refreshing the page
        Task draw;
        // Random number source for variations 
        Random random;

        // Pixel spawn point
        double EX, EY;
        // Screen limits - should be read at runtime, but this is just a demo
        const int SCREEN_WIDTH = 1900;
        const int SCREEN_HEIGHT = 700;
        Vector2D SpeedRange = new Vector2D(1000, 3000);
        // Time (ms) between checks for new parameter values
        int RefreshInterval = 500;
        // Number of pixels spawned per interval : lower = fewer pixels, higher = more pixels
        int SpawnPerInterval = 1;
        // Maximum number of pixels allowed
        int MaxPixelCount = 150;
        // Initial pixel size
        double InitialPixelSize = 10.0;
        // Alter pixel size per frame : lower than 1 = reduce in size, higher than 1 = increase in size
        double PixelScaleFactor = 3.0;
        // Alter pixel alpha per frame : lower than 1 = reduce alpha, higher than 1 = increase alpha
        double PixelAlphaFactor = 0.99;
        // Alter X-axis movement delta per frame : deltaX *= DeltaXFactor
        double DeltaXFactor = 1.11;
        // Alter Y-axis movement delta per frame : deltaY += DeltaYFactor
        double DeltaYFactor = 0.75;
        double Hue = 1.0;
        int pixelCount = 0;

  protected override void OnInit()
    {
        base.OnInit();
        EX = 300;
        EY = 20;
        pixels = new List<PixelDTO>();
        random = new Random();
        draw = Draw();
    }
    protected override bool ShouldRender()
    {
        return Redraw;
    }

    async Task Draw()
    {
        while (true) // Only because this is a demo!
        {
            Redraw = false; // Only allow a redraw if the number of pixels changes
            await Task.Delay(RefreshInterval);

            if (pixelCount < MaxPixelCount)
            {
                for (int i = pixelCount; i < MaxPixelCount; i++)
                {
                    await SpawnPixel();
                    pixelCount++;
                }
                Redraw = true;
                StateHasChanged();
            }
            else if (pixelCount > MaxPixelCount)
            {
                pixelCount = MaxPixelCount;
                await TrimPixels();
                Redraw = true;
                StateHasChanged();
            }
        }
    }

    Task TrimPixels()
    {
        for (int i = pixels.Count - 1; i >= MaxPixelCount; i--)
        {
            pixels.RemoveAt(i);
        }
        return Task.CompletedTask;
    }

    double NextHue()
    {
        Hue++;
        Hue = Hue > 250 ? 5 : Hue;
        return Hue;
    }

    Task SpawnPixel()
    {
        var randomX = random.NextDouble() * 10 - 5;

        PixelDTO pixel = new PixelDTO()
        {
            Colors = new Colors(NextHue(), 90, 70, 1, ColorType.HSLA),
            Scale = InitialPixelSize,
            StartPosition = new Vector2D(EX, EY),
            ArcPosition = new Vector2D(EX + randomX, EY - random.NextDouble() * 1),
            Position = new Vector2D(EX + DeltaXFactor * randomX * DeltaYFactor * EX, SCREEN_HEIGHT),
            ScaleRange = new Vector2D(InitialPixelSize, InitialPixelSize * PixelScaleFactor),
            OpacityRange = new Vector2D(1, PixelAlphaFactor),
        };

        // Add the new pixel to the list, so it gets drawn
        pixels.Add(pixel);
        return Task.CompletedTask;
    }

    //
}